#!/bin/bash

# Base URL for PokeAPI
POKEAPI_URL="https://pokeapi.co/api/v2/pokemon"

# List of Pokémon to fetch
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory
OUTPUT_DIR="pokemon_data"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Error log file
ERROR_FILE="errors.txt"

# Clear or create error log
> "$ERROR_FILE"

# Function to fetch Pokémon data
fetch_pokemon() {
    local pokemon="$1"
    local output_file="$OUTPUT_DIR/$pokemon.json"

    echo "Fetching data for $pokemon..."

    # Make API request
    curl -s -o "$output_file" "$POKEAPI_URL/$pokemon" 2>> "$ERROR_FILE"

    # Check if curl command was successful
    if [ $? -eq 0 ]; then
        # Verify if the output file contains valid JSON
        if jq . "$output_file" > /dev/null 2>> "$ERROR_FILE"; then
            echo "Saved data to $output_file ✅"
        else
            echo "$(date '+%Y-%m-%d %H:%M:%S'): Invalid JSON response for $pokemon" >> "$ERROR_FILE"
            rm -f "$output_file"
        fi
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S'): Failed to retrieve data for $pokemon" >> "$ERROR_FILE"
        rm -f "$output_file"
    fi
}

# Export the function to make it available to background processes
export -f fetch_pokemon

# Export variables needed in background processes
export POKEAPI_URL OUTPUT_DIR ERROR_FILE

# Loop through each Pokémon and run fetch in background
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &
done

# Wait for all background processes to complete
wait

# Check for errors
if [ -s "$ERROR_FILE" ]; then
    echo "Some errors occurred. Check $ERROR_FILE for details."
fi